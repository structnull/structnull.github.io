<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>愛</title>
    <link>https://adharsh.me/blog/</link>
    <description>Recent content in Blog on 愛</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/structnull&#34;&gt;Adharsh&lt;/a&gt; 2022-23</copyright>
    <lastBuildDate>Mon, 18 Nov 2024 12:12:48 +0530</lastBuildDate>
    
        <atom:link href="https://adharsh.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wpa_cracking</title>
      <link>https://adharsh.me/blog/wpa_cracking/</link>
      <pubDate>Mon, 18 Nov 2024 12:12:48 +0530</pubDate>
      
      <guid>https://adharsh.me/blog/wpa_cracking/</guid>
      <description>&lt;h1 id=&#34;wifi-wpa-password-cracking&#34;&gt;Wifi WPA password cracking&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Disclaimer: This article is intended for educational purposes ONLY.
The information presented here is meant to serve as a hands-on exercise to
augment understanding of cybersecurity and ethical hacking principles put into
practice for lawful purposes.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After being jokingly called a &amp;ldquo;hacker&amp;rdquo; for using Arch Linux and working in the terminal, I decided to explore the world of ethical hacking and penetration testing seriously.&lt;/p&gt;
&lt;p&gt;While the journey is just beginning, I am documenting what I learn and sharing insights through my blog. This marks the start of a deeper dive into cybersecurity and the fascinating field of penetration testing.&lt;/p&gt;
&lt;p&gt;First step : Check if your wifi card supports monitor mode or buy one which supports it.&lt;/p&gt;
&lt;h2 id=&#34;kill-potential-interrupting-services&#34;&gt;Kill potential interrupting services.&lt;/h2&gt;
&lt;p&gt;Before enabling monitor mode, identify and kill any services that might interrupt the process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sudo airmon-ng check wlan0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sudo airmon-ng check kill
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enable-monitor-mode&#34;&gt;Enable monitor mode.&lt;/h2&gt;
&lt;p&gt;Stop the WLAN interface and switch it to operate in monitor mode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sudo ifconfig wlan0 down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sudo iwconfig wlan0 mode mon
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sudo ifconfig wlan0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo airmon-ng start wlan0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify the WNIC is operating in monitor mode.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iwconfig
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;hash-extraction-and-preparation-for-cracking&#34;&gt;Hash Extraction and Preparation for Cracking&lt;/h3&gt;
&lt;p&gt;Our initial step in the password cracking procedure involves installing &lt;strong&gt;&lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;Hashcat&lt;/a&gt;&lt;/strong&gt;, which is renowned as the world’s fastest and most advanced password recovery tool. The captured data from network sniffing is typically stored in the &lt;code&gt;pcapng&lt;/code&gt; format. However, Hashcat requires the data to be in a hashfile format for processing.&lt;/p&gt;
&lt;p&gt;To address this, I utilized a tool from the powerful &lt;strong&gt;&lt;a href=&#34;https://github.com/ZerBea/hcxtools&#34;&gt;hcxtools&lt;/a&gt;&lt;/strong&gt; suite. This toolset efficiently converts &lt;code&gt;pcapng&lt;/code&gt; files into the hashfile format, ensuring compatibility with Hashcat and streamlining the cracking process.&lt;/p&gt;
&lt;h3 id=&#34;methods-for-capturing-wifi-handshakes-in-password-cracking&#34;&gt;Methods for Capturing WiFi Handshakes in Password Cracking&lt;/h3&gt;
&lt;p&gt;To crack a WiFi password, it is essential to capture a live four-way handshake, a process that occurs during the establishment of a connection between a client and a router. This requires the attacker to monitor the network at the precise moment when the user or device connects to the WiFi network. Consequently, the attacker must be physically positioned within range of both the access point (router) and the client, relying on the user to enter the correct password and ensuring that all four packets of the handshake are successfully captured.&lt;/p&gt;
&lt;p&gt;To expedite this process, an attacker can employ a deauthentication attack to force an already-connected user to disconnect and re-establish the connection. This approach eliminates the need to wait for a user to connect naturally, which may take an extended period (e.g., a home network user may not reconnect until returning from work). By de-authenticating the user, the attacker can induce the generation of a new four-way handshake, facilitating the capture process.&lt;/p&gt;
&lt;p&gt;Another strategy involves the deployment of a malicious twin network, also known as an &amp;ldquo;evil twin,&amp;rdquo; which mimics the legitimate network by broadcasting the same SSID (network name). This method aims to deceive users into attempting to connect to the fake network, thereby exposing their credentials. However, this technique has significant drawbacks: it is highly conspicuous, as the activity can generate detectable anomalies, and users may readily recognize and avoid the fraudulent network.&lt;/p&gt;
&lt;h3 id=&#34;pmkid-based-wifi-password-cracking-eliminating-real-time-login-capture&#34;&gt;PMKID-Based WiFi Password Cracking: Eliminating Real-Time Login Capture&lt;/h3&gt;
&lt;p&gt;Traditional WiFi password cracking methods rely on capturing a user&amp;rsquo;s login process in real-time or waiting for users to connect to the network. However, leveraging the PMKID (Pairwise Master Key Identifier) attack eliminates these constraints. This approach removes the dependency on users actively connecting to the network and significantly simplifies the cracking process.&lt;/p&gt;
&lt;p&gt;In this method, the attacker only needs to be within the vicinity of the router or network to capture a single PMKID frame. This frame is sufficient to attempt cracking the password without relying on a live four-way handshake. Furthermore, the PMKID approach inherently filters out incorrect passwords and malformed frames that could otherwise disrupt the cracking process.&lt;/p&gt;
&lt;p&gt;Simply put, this technique does not require waiting for user activity on the network. Instead, the attacker passively obtains the PMKID hash and focuses on cracking it.&lt;/p&gt;
&lt;p&gt;To effectively crack a PMKID, it is essential to first understand its generation process.&lt;/p&gt;
&lt;h2 id=&#34;preparing-the-system-for-hcxdumptool-execution&#34;&gt;Preparing the System for Hcxdumptool Execution&lt;/h2&gt;
&lt;p&gt;To ensure optimal performance and prevent interference during the execution of &lt;strong&gt;&lt;a href=&#34;https://github.com/ZerBea/hcxtools&#34;&gt;Hcxdumptool&lt;/a&gt;&lt;/strong&gt;, it is recommended to disable services that could conflict with its operation. The following commands can be used to stop these services:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl stop wpa_supplicant &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo systemctl stop NetworkManager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then it is time to start sniffing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo hcxdumptool -i wlan0 -w dumpfile.pcapng --rds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -F             
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;-i my is my NIC, you can execute ifconfig to find your interface name.&lt;/li&gt;
&lt;li&gt;-w the output pcapng of the execution.&lt;/li&gt;
&lt;li&gt;-F is used to listen to all channels&lt;/li&gt;
&lt;li&gt;use -h to know more about hcxdumptool&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;its-cracking-time&#34;&gt;It’s cracking time!&lt;/h2&gt;
&lt;p&gt;Our first step in the cracking procedure is to install hashcat, the world’s fastest and most advanced password recovery tool.
As the sniffing results are in the form of pcapng, we needed to convert them into a hashfile format to fit it to hashcat.
For this goal, I made use of another tool from the great suite of hcxtools.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hcxpcapngtool -o sed.txt dumpfile.pcapng
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;above makes a hashfile which can be used for cracking using hashcat
Resulting in a hashfile that each line takes on the following structure:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SIGNATURE*TYPE*PMKID/MIC*MACAP*MACSTA*ESSID* * *
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now for cracking passwords using hashcat and using gpu for parallel processing install cuda in your distribution.
and run hashcat&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hashcat -m 22000 -a 3 -w4 -o cracked.txt --opencl-device-types 2 --status --status-timer=10 sed.txt ?d?d?d?d?d?d?d?d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with increment flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hashcat -m 22000 -a 3 -w4 -o cracked.txt --opencl-device-types 2 --status --status-timer=10 --increment --increment-min=8 --increment-max=12 sed.txt ?d?d?d?d?d?d?d?d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;overview for commands used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-m 22000&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Specifies the hash type. &lt;code&gt;22000&lt;/code&gt; is used for WPA-PBKDF2-PMKID+EAPOL (a hash type related to Wi-Fi authentication).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-a 3&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Selects the attack mode. &lt;code&gt;3&lt;/code&gt; is a brute-force attack mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-w4&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Sets the workload profile. &lt;code&gt;4&lt;/code&gt; is the highest workload setting, utilizing maximum GPU resources for performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-o cracked.txt&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Specifies the output file (&lt;code&gt;cracked.txt&lt;/code&gt;) where found passwords will be saved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--opencl-device-types 2&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Limits the attack to only GPU devices (OpenCL device type &lt;code&gt;2&lt;/code&gt; refers to GPUs).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--status&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Enables status output, showing progress periodically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--status-timer=10&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Sets the interval for the status update to every 10 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sed.txt&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The input file containing the hash(es) to be cracked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;?d?d?d?d?d?d?d?d&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;A mask specifying the brute-force pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the output of cracked passwords should be in cracked.txt in the same dir.&lt;/p&gt;
&lt;h2 id=&#34;now-how-do-i-attack-a-specific-wifi-address&#34;&gt;Now how do I attack a specific Wifi address?&lt;/h2&gt;
&lt;p&gt;Just create a Berkeley Packet Filter and add it to hcxdumptool. from &lt;a href=&#34;https://github.com/ZerBea/hcxdumptool/discussions/348&#34;&gt;github issue&lt;/a&gt;
Note: card should be in Managed mode to scan networks.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-with-aircrack-ng&#34;&gt;how to use with aircrack-ng&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://predatech.co.uk/capturing-and-cracking-wpa-wpa2-wifi-passwords/&#34;&gt;useful guide with syntax errors&lt;/a&gt;&lt;/p&gt;
</description>
      
      
    </item>
    
    <item>
      <title>Sbctl in archlinux</title>
      <link>https://adharsh.me/blog/sbctl/</link>
      <pubDate>Sat, 24 Aug 2024 15:04:46 +0530</pubDate>
      
      <guid>https://adharsh.me/blog/sbctl/</guid>
      <description>&lt;p&gt;This is a blog/guide on how to setup a secureboot signed uefi boot using grub in archlinux.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure some of you can relate when I say that dealing with Valorant&amp;rsquo;s anti-cheat(kernal level spyware) measures (I know, I hate it too)
has driven me up the wall. And to make matters worse, switching between my laptop&amp;rsquo;s UEFI settings every time I boot into Windows was a real pain.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why I decided to search for solutions and stumbled upon the Arch Linux wiki on Unified Extensible Firmware Interface (UEFI). After some digging, I realized that setting up
Secure Boot with GRUB in Arch Linux wasn&amp;rsquo;t as complicated as I thought it&amp;rsquo;d be.&lt;/p&gt;
&lt;p&gt;The main stuff needed here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Foxboron/sbctl&#34;&gt;sbctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Implementing_Secure_Boot&#34;&gt;archwiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;room temprature iq.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also be warned that not every thing showed here should work on your pc/laptops and it may/may not brick ur bios.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adharsh.me/images/warning.png&#34; alt=&#34;WARNING&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;re taking control by signing our bootloader (Grub) and EFI files with our
own keys. To do this, we need to enter the setup mode of Secure Boot in BIOS/UEFI.&lt;/p&gt;
&lt;p&gt;As for getting into this mode, there are various methods, but one way is similar to
what&amp;rsquo;s shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adharsh.me/images/bios.png&#34; alt=&#34;bios&#34;&gt;&lt;/p&gt;
&lt;p&gt;After it is in setup mode and secureboot disabled reboot into archlinux and install sbctl using&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -S sbctl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and check for sbctl status (need root access)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see that sbctl is not installed and secure boot is disabled.
Then create your custom secure boot keys:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl create-keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Enroll your keys, with Microsoft&amp;rsquo;s keys, to the UEFI:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl enroll-keys -m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check the secure boot status again:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sbctl should be installed now, but secure boot will not work until the boot files have been signed with the keys you just created.&lt;/p&gt;
&lt;p&gt;before signing , Re-install GRUB to utilize Microsoft&amp;rsquo;s CA certificates (as opposed to shim) &amp;ndash; replace &amp;rsquo;esp&amp;rsquo; with your EFI system partition:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo grub-install --target=x86_64-efi --efi-directory=esp --bootloader-id=GRUB --modules=&amp;#34;tpm&amp;#34; --disable-shim-lock 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check what files need to be signed for secure boot to work:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl verify
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now sign all the unsigned files. Usually the kernel and the boot loader and grub need to be signed. For example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl sign -s /boot/vmlinuz-linux
sbctl sign -s /boot/EFI/BOOT/BOOTX64.EFI
sbctl sign -s /boot/EFI/GRUB/grubx64.efi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The files that need to be signed will depend on your system&amp;rsquo;s layout, kernel and boot loader.&lt;/p&gt;
&lt;p&gt;Now you are done! Reboot your system and turn secure boot back on in the firmware settings. If the boot loader and OS load, secure boot should be working. Check with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sbctl status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;it should be something like this &amp;ndash;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adharsh.me/images/sbctl.png&#34; alt=&#34;sbctl&#34;&gt;&lt;/p&gt;
&lt;p&gt;Following this procedural sequence, Arch Linux can now be booted, thereby effecting a
seamless transition into a functional operating environment using secure-boot!.&lt;/p&gt;
&lt;h3 id=&#34;as-a-precautionary-measure-it-is-incumbent-upon-the-reader-to-acknowledge-that-i-assume-no-liability-for-any-unforeseen-consequences-that-may-arise-from-the-implementation-of-these-instructions-without-proper-circumspection-and-technical-competence&#34;&gt;As a precautionary measure, it is incumbent upon the reader to acknowledge that I assume no liability for any unforeseen consequences that may arise from the implementation of these instructions without proper circumspection and technical competence.&lt;/h3&gt;
</description>
      
      
    </item>
    
  </channel>
</rss>
